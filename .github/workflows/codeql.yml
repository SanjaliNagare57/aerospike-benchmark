# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: Build and Test All

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '45 11 * * 6'
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CLIENTREPO: ${GITHUB_WORKSPACE}/client
    strategy:
      matrix: 
        ev-lib: [libev, libuv, libevent]
    steps:
    - name: Install event libs
      run: sudo apt-get install -y libevent-dev libev-dev libuv1-dev
    - name: install lcov
      run: |
        wget "https://github.com/linux-test-project/lcov/archive/master.zip"
        unzip master.zip
        cd lcov-master
        sudo make install
    - name: Download libyaml
      uses: dsaltares/fetch-gh-release-asset@0.0.5
      with:
        repo: "yaml/libyaml"
        version: "tags/0.2.5"
        file: yaml-0.2.5.tar.gz
    - name: Cache libyaml
      id: cache-libyaml
      uses: actions/cache@v2
      env:
        cache-name: libyaml
      with:
        path: yaml-0.2.5
        key: yaml-0.2.5-${{ runner.os }}
    - name: Build libyaml
      id: build-libyaml
      if: steps.cache-libyaml.outputs.cache-hit != 'true'
      run: |
        tar xvfz yaml-0.2.5.tar.gz && cd yaml-0.2.5
        ./configure
        make
    - name: install libyaml
      run: |
        cd yaml-0.2.5
        sudo make install
    - name: Download libcheck
      uses: dsaltares/fetch-gh-release-asset@0.0.5
      with:
        repo: "libcheck/check"
        version: "tags/0.15.2"
        file: check-0.15.2.tar.gz
    - name: Cache libcheck
      id: cache-libcheck
      uses: actions/cache@v2
      env:
        cache-name: libcheck
      with:
        path: check-0.15.2
        key: check-0.15.2-${{ runner.os }}
    - name: Build libcheck
      id: build-libcheck
      if: steps.cache-libcheck.outputs.cache-hit != 'true'
      run: |
        tar xvfz check-0.15.2.tar.gz && cd check-0.15.2
        ./configure
        make
        make check
    - name: install libcheck
      run: |
        cd check-0.15.2
        sudo make install
        sudo ldconfig
    - name: Checkout c client
      uses: actions/checkout@v2
      with:
        repository: aerospike/aerospike-client-c
        submodules: recursive
        path: client
    - name: Checkout benchmark 
      uses: actions/checkout@v2
      with: 
        path: main
        submodules: recursive
    - name: Info
      run: make info
      working-directory: main
    - name: Build client lib
      run: make EVENT_LIB=${{ matrix.ev-lib }}
      working-directory: client
    - name: Build benchmark
      run: make EVENT_LIB=${{ matrix.ev-lib }}
      working-directory: main
    - name: Test
      run: make coverage-all EVENT_LIB=${{ matrix.ev-lib }}
      working-directory: main
    - name: clear temp directories
      run: |
        rm -rf client
        rm -rf main/target
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1.0.15
      with:
        verbose: false
        directory: main/test_target
        files: main/test_target/aerospike-benchmark-all.info
  
  CodeQL:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      actions: read
      contents: read
      security-events: write
  
    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp', 'python' ]
          # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
          # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support
  
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Checkout submodules
      run: git submodule update --init
  
      # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.
          
          # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          # queries: security-extended,security-and-quality
    - if: matrix.language == 'cpp' 
      name: Build Cpp 
      run: |
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
         make [EVENT_LIB=libev|libuv|libevent]
         
  
    - if: matrix.language == 'python'
      name: Autobuild
      uses: github/codeql-action/autobuild@v2
  
      
      
      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
  
  
      # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
      # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
  
      #   If the Autobuild fails above, remove it and uncomment the following three lines. 
      #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.
  
      # - run: |
      #   echo "Run, Build Application using script"
      #   ./location_of_script_within_repo/buildscript.sh
  
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
  
