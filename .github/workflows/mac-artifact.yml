name: Mac Artifact
on:
  push:
    branches: [actionsHub, main, test-ready, mac_build]
  pull_request:
    branches: [actionsHub]
  workflow_call:
    inputs:
      submodule:
        description: The directory of the submodule, if this workflow is being called on a submodule
        required: false
        type: string
jobs:
  build:
    runs-on: macos-10.15
    strategy:
      matrix:
        ev-lib: ["", libev, libuv, libevent]
    env:
      LIBYAML_VERSION: 0.2.5
    steps:
    - uses: kenchan0130/actions-system-info@master
      id: system-info
    - name: Install event libs
      run: |
        brew install libuv libev libevent automake
    - name: Download libyaml
      uses: actions/checkout@v2
      with:
        repository: yaml/libyaml
        submodules: recursive
        ref: ${{ env.LIBYAML_VERSION }}
        path: ${{ inputs.submodule || '.' }}/yaml-${{ env.LIBYAML_VERSION }}
    - name: Cache libyaml
      id: cache-libyaml
      uses: actions/cache@v2
      env:
        cache-name: libyaml
      with:
        path: ${{ inputs.submodule || '.' }}/yaml-${{ env.LIBYAML_VERSION }}
        key: yaml-${{ env.LIBYAML_VERSION }}-v2-${{ runner.os }}
    - name: Build libyaml
      id: build-libyaml
      if: steps.cache-libyaml.outputs.cache-hit != 'true'
      run: |
        cd ${{ inputs.submodule || '.' }}
        cd yaml-${{ env.LIBYAML_VERSION }}
        autoreconf -i
        ./bootstrap
        ./configure
        make
    - name: install libyaml
      run: |
        cd ${{ inputs.submodule || '.' }}
        cd yaml-${{ env.LIBYAML_VERSION }}
        sudo make install
    - name: Checkout benchmark
      uses: actions/checkout@v2
      with: 
        submodules: recursive
    - name: Build benchmark
      run: |
        make EVENT_LIB=${{ matrix.ev-lib }}
      working-directory: ${{ inputs.submodule || '.' }}
    - name: Sanity test asbench artifact
      run: |
        ./benchmark | grep "ERROR Failed to connect"
      working-directory: ${{ inputs.submodule || '.' }}/target
    - name: Get artifact name
      run: |
        set -e
        NAME=-${{ matrix.ev-lib}}
        if [ "${NAME}" = "-" ]; then NAME="" ; fi
        echo "::set-output name=name::benchmark$NAME"
      id: get_name
    - name: Move artifacts to target dir HACK # This could be done in the makefile
      run: |
        cd ${{ inputs.submodule || '.' }}
        mkdir -p tmp/target/${{ steps.system-info.outputs.platform }}-${{ runner.arch }}/${{ runner.os }}-${{ steps.system-info.outputs.release }}
        mv ${{ inputs.submodule || '.' }}/target/benchmark tmp/target/${{ steps.system-info.outputs.platform }}-${{ runner.arch }}/${{ runner.os }}-${{ steps.system-info.outputs.release }}
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with: 
        name: ${{steps.get_name.outputs.name}}
        path: ${{ inputs.submodule || '.' }}/tmp/target
        if-no-files-found: error
  # bundle-binaries:
  #   needs: build
  #   runs-on: macos-10.15
    
  #   steps:
  #     # - name: Checkout benchmark
  #     #   uses: actions/checkout@v2
  #     #   with: 
  #     #     submodules: recursive
  #     - uses: kenchan0130/actions-system-info@master
  #       id: system-info
  #     - name: Get artifacts
  #       uses: actions/download-artifact@v2
  #       with: 
  #         path: target/${{ steps.system-info.outputs.platform }}-${{ runner.arch }}/${{ runner.os }}-${{ steps.system-info.outputs.release }}
  #     # - name: Create tarball
  #     #   run: tar -czf binaries.tgz target
  #     - name: Get artifact name
  #       uses: haya14busa/action-cond@v1
  #       id: artifact-name
  #       with:
  #         cond: ${{ inputs.submodule != '' }}
  #         if_true: ${{ inputs.submodule }}-binaries
  #         if_false: binaries
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ steps.artifact-name.outputs.value }}
  #         path: ${{ inputs.submodule || '.' }}/target
