name: Build:Main
on:
  push:
    branches: [ main, mac_build ]
jobs:
  build-libraries:
    runs-on: macos-10.15
    strategy:
      matrix:
        ev-lib: ["", libev, libuv, libevent]
    env:
      LIBYAML_VERSION: 0.2.5
    steps:
    - name: Install event libs
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get install -y libevent-dev libev-dev libuv1-dev
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install libuv libev libevent automake
        else
          echo "$RUNNER_OS not supported"
          exit 1
        fi
    - name: Download libyaml
      uses: actions/checkout@v2
      with:
        repository: yaml/libyaml
        submodules: recursive
        ref: ${{ env.LIBYAML_VERSION }}
        path: yaml-${{ env.LIBYAML_VERSION }}
    - name: Cache libyaml
      id: cache-libyaml
      uses: actions/cache@v2
      env:
        cache-name: libyaml
      with:
        path: yaml-${{ env.LIBYAML_VERSION }}
        key: yaml-${{ env.LIBYAML_VERSION }}-v2-${{ runner.os }}
    - name: Build libyaml
      id: build-libyaml
      if: steps.cache-libyaml.outputs.cache-hit != 'true'
      run: |
        cd yaml-${{ env.LIBYAML_VERSION }}
        autoreconf -i
        ./bootstrap
        ./configure
        make
    - name: install libyaml
      run: |
        cd yaml-${{ env.LIBYAML_VERSION }}
        sudo make install
    - name: Checkout benchmark
      uses: actions/checkout@v2
      with: 
        path: main
        submodules: recursive
    - name: Build benchmark
      run: make EVENT_LIB=${{ matrix.ev-lib }}
      working-directory: main
    - name: Sanity test asbench artifact
      run: |
        ./benchmark | grep "ERROR Failed to connect"
      working-directory: main/target
    - name: Get artifact name
      run: |
        set -e
        NAME=-${{ matrix.ev-lib}}
        if [ "${NAME}" = "-" ]; then NAME="" ; fi
        echo "::set-output name=name::benchmark-$RUNNER_OS$NAME"
      id: get_name
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with: 
        name: ${{steps.get_name.outputs.name}}
        path: main/target/benchmark
        if-no-files-found: error
  pre-release:
    needs: build-libraries
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout benchmark
        uses: actions/checkout@v2
        with: 
          submodules: recursive
      - name: Get artifacts
        uses: actions/download-artifact@v2
        with: 
          path: binaries/
      - name: Create tarball
        run: tar -czf binaries.tar.gz binaries
      - name: Automatic Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Snapshot Build"
          files: |
            binaries.tar.gz
            LICENSE.md
            README.md
